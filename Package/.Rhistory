sqlite.driver <- dbDriver("SQLite")
ElasticNet <- dbConnect(sqlite.driver,
dbname = filename)
dbListTables(ElasticNet)
ENextra <- dbReadTable(ElasticNet,"extra")
library(RSQLite)
library(tidyverse)
filename <- "/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/CPTAC_Song/Paper_MiXcan/Data/Submission/en_Breast_Mammary_Tissue.db"
#filename <- "Data/PredictDBModel/V8_elastic_net_models/en_Prostate.db"
sqlite.driver <- dbDriver("SQLite")
ElasticNet <- dbConnect(sqlite.driver,
dbname = filename)
dbListTables(ElasticNet)
ENextra <- dbReadTable(ElasticNet,"extra")
ENweights <- dbReadTable(ElasticNet,"weights")
dim(ENextra)
View(ENextra)
ENextra[1:3,]
summary(ENextra$cv_R2_avg)
summary(ENextra$test_R2_avg)
summary(ENextra$in_sample_R2)
summary(ENextra$pred.perf.R2)
?MiXcan
library(MiXcan)
?MiXcan
library(MiXcan)
library(tidyverse)
library(doParallel)
nCores=detectCores()-1; registerDoParallel(nCores) # use parallel computing for speed,
# data
data(example_data)
objects()
?pi_estimation
# data
set.seed(123)
data(example_data)
x=x_example
y=y_example
cov=cov_example
yName="Gene1"
pi <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior,
n_iteration = 5)$mean_trim_0.05
foldid1 <- sample(1:10, length(y), replace=T)
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
MiXcan_weight_result <- MiXcan_extract_weight(model = model, keepZeroWeight = F)
MiXcan_weight_result2 <- MiXcan_extract_weight(model = model, keepZeroWeight = T)
MiXcan_weight_result
MiXcan_weight_result2
model$type=="NonSpecific"
x=as.matrix(x); y=as.matrix(y); p=ncol(x)
if (is.null(cov)) {xcov=x} else {
cov=as.matrix(cov); xcov=as.matrix(cbind(x, cov))}
xreduced=as.matrix(xcov[, Matrix::which(as.numeric(model$glmnet.tissue$beta) !=0)])
snpidx=Matrix::which(model$glmnet.tissue$beta[1:p]!=0)
ncol(xreduced)
ft=glmnet::glmnet(x=xreduced, y=y, family = "gaussian", alpha=0, lambda = 0)
beta=ft$beta[1:length(snpidx)]
beta
MiXcan_weight_result$weight_cell_1=
MiXcan_weight_result$weight_cell_2=as.numeric(beta)
MiXcan_weight_result
MiXcan_weight_result2
MiXcan_weight_result2$weight_cell_1
MiXcan_weight_result2$weight_cell_1[which(MiXcan_weight_result2$weight_cell_1)!=0]=
MiXcan_weight_result2$weight_cell_2[which(MiXcan_weight_result2$weight_cell_1)!=0]=
as.numeric(beta)
MiXcan_weight_result2$weight_cell_1!=0
MiXcan_weight_result2$weight_cell_1[MiXcan_weight_result2$weight_cell_1!=0]=
MiXcan_weight_result2$weight_cell_2[MiXcan_weight_result2$weight_cell_1!=0]=
as.numeric(beta)
MiXcan_weight_result2
MiXcan_weight_result
xreduced
dim(xreduced)
xreduced=xreduced[,1]
ft=lm(y~xreduced)
beta=ft$coefficients[-1]
beta
MiXcan_weight_result2$weight_cell_1[MiXcan_weight_result2$weight_cell_1!=0]=
MiXcan_weight_result2$weight_cell_2[MiXcan_weight_result2$weight_cell_1!=0]=
as.numeric(beta)
MiXcan_weight_result2
x=as.matrix(x); y=as.matrix(y); p=ncol(x)
if (is.null(cov)) {
ci=pi-0.5; z=ci*x; z=as.matrix(z); xx=as.matrix(cbind(ci, x, z))
} else {
cov=as.matrix(cov); ci=pi-0.5; z=ci*x;
xx=as.matrix(cbind(ci, x, z, cov))}
idx=Matrix::which(model$glmnet.cell$beta!=0)
xreduced=xx[,idx]
ft=glmnet::glmnet(x=xreduced, y=y, family = "gaussian", alpha=0, lambda = 0)
est0=as.numeric(ft$beta)
beta=rep(0, length(model$glmnet.cell$beta))
beta[idx]=est0
est=c(0, beta)
beta11=est[3: (p+2)] + est[(p+3): (2*p+2)]/2
beta21=est[3: (p+2)] - est[(p+3): (2*p+2)]/2
MiXcan_weight_result2$weight_cell_1=beta11
MiXcan_weight_result2$weight_cell_2=beta21
MiXcan_weight_result2
MiXcan_weight_result2
MiXcan_weight_result = MiXcan_weight_result2 %>%
dplyr::filter(!(weight_cell_1 == 0 & weight_cell_1 == 0))
install.packages("devtools")
devtools::install_github("songxiaoyu/MiXcan/Package")
install.packages("devtools")
devtools::install_github("songxiaoyu/MiXcan/Package")
library(MiXcan)
?MiXcan
devtools::document()
library(MiXcan)
library(MiXcan)
library(tidyverse)
library(doParallel)
nCores=detectCores()-1; registerDoParallel(nCores) # use parallel computing for speed,
# data
set.seed(123)
data(example_data)
x=x_example
y=y_example
cov=cov_example
yName="Gene1"
pi <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior,
n_iteration = 5)$mean_trim_0.05
# function to combine multiple outputs
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
B=2
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
seed=123
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
i=1
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
?MiXcan_refit_weight
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = MiXcan_result,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
MiXcan_summary_refit <- MiXcan_refit_summary(model = model, y=y,
x=x, cov = cov,
pi= pi)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
MiXcan_summary_refit <- MiXcan_refit_summary(model = model, y=y,
x=x, cov = cov,
pi= pi)
MiXcan_weight_refit
MiXcan_summary_refit
# function to combine multiple outputs
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], sapply(list(...), function(y) y[[i]])))
}
res1=list(MiXcan_weight_refit, MiXcan_summary_refit)
# start foreach
res=foreach(i = 1:B, .combine='comb', .multicombine=TRUE) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
MiXcan_summary_refit <- MiXcan_refit_summary(model = model, y=y,
x=x, cov = cov,
pi= pi)
res1=list(MiXcan_weight_refit, MiXcan_summary_refit)
return(res1)
}
res
length(res)
res[[1]]
list(MiXcan_weight_refit, MiXcan_summary_refit)
# function to combine multiple outputs
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) rbind(x[[i]], sapply(list(...), function(y) y[[i]])))
}
# start foreach
res=foreach(i = 1:B, .combine='comb', .multicombine=TRUE) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
MiXcan_summary_refit <- MiXcan_refit_summary(model = model, y=y,
x=x, cov = cov,
pi= pi)
res1=list(MiXcan_weight_refit, MiXcan_summary_refit)
return(res1)
}
# function to combine multiple outputs
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], sapply(list(...), function(y) y[[i]])))
}
x=list(1, 2)
x
comb(x)
x2=list(3, 4)
comb(x, x2)
res
# start foreach
res=foreach(i = 1:B, .combine='rbind') %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(MiXcan_weight_refit)
}
MiXcan_weight_refit
# start foreach
res=foreach(i = 1:B, .combine='cbind') %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(MiXcan_weight_refit)
}
# start foreach
res=foreach(i = 1:B, .combine=rbind) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(MiXcan_weight_refit)
}
i=1
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
# data
set.seed(123)
data(example_data)
x=x_example
y=y_example
cov=cov_example
yName="Gene1"
# start foreach
res=foreach(i = 1:B, .combine=rbind) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(MiXcan_weight_refit)
}
res
# start foreach
res=foreach(i = 1:B, .combine=rbind) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(cbind(ID=i, MiXcan_weight_refit))
}
res
unique(res[,c("ID", "type")])
sum=unique(res[,c("ID", "type")])
sum
mean(sum$type=="NonSpecific")
vote=c(mean(sum$type=="CellTypeSpecific"), mean(sum$type=="NonSpecific"),
mean(sum$type=="NoPredictor"))
vote
vote=c(CellTypeSpecific=mean(sum$type=="CellTypeSpecific"),
mean(sum$type=="NonSpecific"),
mean(sum$type=="NoPredictor"))
vote
vote=c(CellTypeSpecific=mean(sum$type=="CellTypeSpecific"),
NonSpecific=mean(sum$type=="NonSpecific"),
NoPredictor=mean(sum$type=="NoPredictor"))
vote
res %>% group_by(xNamematrix, type) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean)
res
res %>% group_by(xNameMatrix, type) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean)
res %>% group_by(type, xNameMatrix) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean)
seed
# start foreach
res=foreach(i = 1:B, .combine=rbind) %dopar% {
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(cbind(ID=i, MiXcan_weight_refit))
}
res
# start foreach
res=foreach(i = 1:B, .combine=rbind) %do% {
print(i)
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(cbind(ID=i, MiXcan_weight_refit))
}
res
seed+i*123
i
i=1
seed+i*123
i=1
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
folid1[1:3]
foldid1[1:3]
i=2
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
foldid1[1:3]
?MiXcan
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
model
i
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
MiXcan_weight_refit
B=5
# start foreach
res=foreach(i = 1:B, .combine=rbind) %do% {
print(i)
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(cbind(ID=i, MiXcan_weight_refit))
}
res
sum=unique(res[,c("ID", "type")])
vote=c(CellTypeSpecific=mean(sum$type=="CellTypeSpecific"),
NonSpecific=mean(sum$type=="NonSpecific"),
NoPredictor=mean(sum$type=="NoPredictor"))
res %>% group_by(type, xNameMatrix) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean)
vote
res %>% group_by(type, xNameMatrix) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean) %>%
filter(weight_cell_1==0 & weight_cell_2==0)
res %>% group_by(type, xNameMatrix) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean) %>%
filter(weight_cell_1!=0 |weight_cell_2 !=0)
MiXcan_ensemble=function(y, x, cov, pi, yName=NULL, B=10, seed=NULL) {
# start foreach
res=foreach(i = 1:B, .combine=rbind) %do% {
print(i)
# set seed
if (is.null(seed)==F) {set.seed(seed+i*123);
foldid1 <- sample(1:10, length(y), replace=T)
} else {foldid1=NULL}
# run MiXcan
model <- MiXcan(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid1, yName=yName)
# Refit
MiXcan_weight_refit <- MiXcan_refit_weight(model = model,
y=y,
x=x, cov = cov,
pi= pi, keepZeroWeight=T)
return(cbind(ID=i, MiXcan_weight_refit))
}
sum=unique(res[,c("ID", "type")])
vote=c(CellTypeSpecific=mean(sum$type=="CellTypeSpecific"),
NonSpecific=mean(sum$type=="NonSpecific"),
NoPredictor=mean(sum$type=="NoPredictor"))
ensemble_weight= res %>% group_by(type, xNameMatrix) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean) %>%
filter(weight_cell_1!=0 |weight_cell_2 !=0)
return(list(vote=vote, ensemble_weight=ensemble_weight))
}
pi_example <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior,
n_iteration = 5)$mean_trim_0.05
ensbl=MiXcan_ensemble(y=y_example, x=x_example, cov = cov_example,
pi= pi_example, yName="Gene1", B=11, seed=123)
ensbl$ensemble_weight
ensbl$vote
res
-0.11865446 /5
