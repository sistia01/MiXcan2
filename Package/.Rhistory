ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_weight
ensemble$all_weights
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$all_summary
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=245)
ensemble$ensemble_summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=20, seed=245)
ensemble$ensemble_summary
MiXcan_summary_result
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=20, seed=145)
ensemble$ensemble_summary
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=30, seed=145)
ensemble$ensemble_summary
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=100, seed=355)
ensemble$ensemble_summary
set.seed(222)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
MiXcan_summary_result
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary_by_type
MiXcan_summary_result
B=5
seed=123
yName="Gene1"
xNameMatrix=NULL
# format input
x=as.matrix(x); y=as.matrix(y)
n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
if(is.null(xNameMatrix)) {xNameMatrix=paste0("SNP", 1:p)}
if (is.null(foldid)) {foldid= sample(1:10, n, replace=T)}
if (is.null(cov)) {
pcov=0; xcov=x;
ci=pi-0.5; z=ci*x; xx=as.matrix(cbind(ci, x, z))
}
if (is.null(cov)==F) {
cov=as.matrix(cov)
pcov=ncol(cov); xcov=as.matrix(cbind(x, cov))
ci=pi-0.5; z=ci*x;
xx=as.matrix(cbind(ci, x, z, cov))
}
# tissue model
ft00=glmnet::cv.glmnet(x=xcov, y=y,family="gaussian",  foldid=foldid, alpha=0.5)
ft0=glmnet::glmnet(x=xcov, y=y,  family="gaussian", lambda = ft00$lambda.1se, alpha=0.5)
est.tissue=c(ft0$a0,as.numeric(ft0$beta))
# cell type specific model
ft11=glmnet::cv.glmnet(x=xx, y=y,
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian", foldid=foldid, alpha=0.5)
ft=glmnet::glmnet(x=xx, y=y, penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
est=c(ft$a0,as.numeric(ft$beta))
beta10=est[1]+est[2]/2
beta20=est[1]-est[2]/2
beta11=est[3: (p+2)] + est[(p+3): (2*p+2)]/2
beta21=est[3: (p+2)] - est[(p+3): (2*p+2)]/2
## add inference for difference > 0
Type ="NonSpecific"
idx.diff=((p+3): (2*p+2)) -1
idx.nonzero=which(est[-1]!=0)
idx.nonzero.diff=intersect(idx.diff, idx.nonzero)
if (length(idx.nonzero.diff)!=0) {
xx.select=xx[,idx.nonzero]
beta.ols.boot=NULL; # beta.en.boot=NULL
for(boot in 1:200) {
id=sample(n, n, replace =T)
gfit = lm(y[id,]~xx.select[id,])
beta.ols.boot =rbind(beta.ols.boot, coef(gfit)[-1])
}
beta.range=apply(beta.ols.boot, 2, function(f)
quantile(f, prob=c(0.025, 0.975), na.rm=T))
beta.diff.range=beta.range[, match(idx.nonzero.diff, idx.nonzero)]
# print(beta.diff.range)
if (is.null(dim(beta.diff.range))) {
any.nonzero= beta.diff.range[1] * beta.diff.range[2]>0} else {
print(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0))
any.nonzero= any(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0), na.rm=T)
}
if (is.na(any.nonzero)==F & any.nonzero==T) {Type ="CellTypeSpecific"}
}
if (Type!="CellTypeSpecific") {
beta1=beta2=est.tissue
} else {
if (is.null(cov)) {
beta1=c(beta10, beta11)
beta2=c(beta20, beta21)
}
if (is.null(cov)==F) {
beta_cov=est[ (2*p+3): (2*p+2+pcov)]
beta1=c(beta10, beta11, beta_cov)
beta2=c(beta20, beta21, beta_cov)
}
}
beta.all.models=cbind(est.tissue, beta1, beta2)
colnames(beta.all.models)=c("Tissue", "Cell1", "Cell2")
beta.SNP.cell1=data.frame(xNameMatrix, weight=beta1[2:(p+1)])
beta.SNP.cell2=data.frame(xNameMatrix, weight=beta2[2:(p+1)])
if (suppressWarnings(
all(c(beta.SNP.cell1$weight, beta.SNP.cell2$weight)==0) )) {
Type ="NoPredictor"}
design=cbind(1,x)
y_hat=pi*(design %*% beta.all.models[1:(1+p), "Cell1"])+
(1-pi)*(design %*% beta.all.models[1:(1+p), "Cell2"])
cor(y_hat, y)
cor(y_hat, y)^2
var(y_hat)/var(y)
x=rnorm(100)
n=100
y=x*0.4+rnorm(n)
lm(y~x)
f=lm(y~x)
yhat=predict(f)
cor(y, yhat)
cor(y, yhat)^2
1-f$residuals^2/var(y)
1-sum(f$residuals^2)/var(y)
1-mean(f$residuals^2)/var(y)
cor(y, yhat)^2
x2=rnorm(n)
y=0.1+0.2*x+0.4*x2+rnorm(n)
b=lm(y~x+x2)
?lm
1-mean(b$residuals^2)/var(y)
hat=predict(b)
cor(y, hat)^2
1-mean((y-hat)^2)/var(y)
in.sample.r2= 1-sum( (y-y_hat)^2)/sum(y^2)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
design=cbind(1,x)
y_hat=pi*(design %*% beta.all.models[1:(1+p), "Cell1"])+
(1-pi)*(design %*% beta.all.models[1:(1+p), "Cell2"])
in.sample.r2= 1-sum( (y-y_hat)^2)/sum(y^2)
in.sample.r2
sum(y^2)
sum( (y-y_hat)^2)
beta.all.models[1:(1+p), "Cell1"]
beta.all.models[1:(1+p), "Cell2"]
x=x_example
y=y_example
cov=cov_example
# MiXcan2  -------
set.seed(222)
foldid <- sample(1:10, length(y), replace=T)
# format input
x=as.matrix(x); y=as.matrix(y)
n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
if(is.null(xNameMatrix)) {xNameMatrix=paste0("SNP", 1:p)}
if (is.null(foldid)) {foldid= sample(1:10, n, replace=T)}
if (is.null(cov)) {
pcov=0; xcov=x;
ci=pi-0.5; z=ci*x; xx=as.matrix(cbind(ci, x, z))
}
if (is.null(cov)==F) {
cov=as.matrix(cov)
pcov=ncol(cov); xcov=as.matrix(cbind(x, cov))
ci=pi-0.5; z=ci*x;
xx=as.matrix(cbind(ci, x, z, cov))
}
# tissue model
ft00=glmnet::cv.glmnet(x=xcov, y=y,family="gaussian",  foldid=foldid, alpha=0.5)
ft0=glmnet::glmnet(x=xcov, y=y,  family="gaussian", lambda = ft00$lambda.1se, alpha=0.5)
est.tissue=c(ft0$a0,as.numeric(ft0$beta))
# cell type specific model
ft11=glmnet::cv.glmnet(x=xx, y=y,
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian", foldid=foldid, alpha=0.5)
ft=glmnet::glmnet(x=xx, y=y, penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
est=c(ft$a0,as.numeric(ft$beta))
beta10=est[1]+est[2]/2
beta20=est[1]-est[2]/2
beta11=est[3: (p+2)] + est[(p+3): (2*p+2)]/2
beta21=est[3: (p+2)] - est[(p+3): (2*p+2)]/2
## add inference for difference > 0
Type ="NonSpecific"
idx.diff=((p+3): (2*p+2)) -1
idx.nonzero=which(est[-1]!=0)
idx.nonzero.diff=intersect(idx.diff, idx.nonzero)
if (length(idx.nonzero.diff)!=0) {
xx.select=xx[,idx.nonzero]
beta.ols.boot=NULL; # beta.en.boot=NULL
for(boot in 1:200) {
id=sample(n, n, replace =T)
gfit = lm(y[id,]~xx.select[id,])
beta.ols.boot =rbind(beta.ols.boot, coef(gfit)[-1])
}
beta.range=apply(beta.ols.boot, 2, function(f)
quantile(f, prob=c(0.025, 0.975), na.rm=T))
beta.diff.range=beta.range[, match(idx.nonzero.diff, idx.nonzero)]
# print(beta.diff.range)
if (is.null(dim(beta.diff.range))) {
any.nonzero= beta.diff.range[1] * beta.diff.range[2]>0} else {
print(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0))
any.nonzero= any(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0), na.rm=T)
}
if (is.na(any.nonzero)==F & any.nonzero==T) {Type ="CellTypeSpecific"}
}
if (Type!="CellTypeSpecific") {
beta1=beta2=est.tissue
} else {
if (is.null(cov)) {
beta1=c(beta10, beta11)
beta2=c(beta20, beta21)
}
if (is.null(cov)==F) {
beta_cov=est[ (2*p+3): (2*p+2+pcov)]
beta1=c(beta10, beta11, beta_cov)
beta2=c(beta20, beta21, beta_cov)
}
}
beta.all.models=cbind(est.tissue, beta1, beta2)
colnames(beta.all.models)=c("Tissue", "Cell1", "Cell2")
beta.SNP.cell1=data.frame(xNameMatrix, weight=beta1[2:(p+1)])
beta.SNP.cell2=data.frame(xNameMatrix, weight=beta2[2:(p+1)])
if (suppressWarnings(
all(c(beta.SNP.cell1$weight, beta.SNP.cell2$weight)==0) )) {
Type ="NoPredictor"}
# get in sample R2
if (Type=="NonSpecific" | Type=="CellTypeSpecific") {
design=cbind(1,x)
y_hat=pi*(design %*% beta.all.models[1:(1+p), "Cell1"])+
(1-pi)*(design %*% beta.all.models[1:(1+p), "Cell2"])
in.sample.r2= 1-sum( (y-y_hat)^2)/sum(y^2)
} else {in.sample.r2=0}
in.sample.r2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=as.matrix(xcov[foldid!=i,]), y=y[foldid!=i],
family="gaussian",
lambda = ft00$lambda.1se, alpha=0.5)
y_hat=as.matrix(x[foldid==i,]) %*% temp$beta[1:p]
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
all_r2
all_r2[is.na(all_r2)]=0
cv.r2=mean(all_r2)
cv.r2
temp=glmnet::glmnet(x=xx[foldid!=i, ], y=y[foldid!=i],
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (p+2)] + test[(p+3): (2*p+2)]/2
tbeta21=test[3: (p+2)] - test[(p+3): (2*p+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, x[foldid==i, ] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xx[foldid!=i, ], y=y[foldid!=i],
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (p+2)] + test[(p+3): (2*p+2)]/2
tbeta21=test[3: (p+2)] - test[(p+3): (2*p+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, x[foldid==i, ] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
all_r2
all_r2[is.na(all_r2)]=0
cv.r2=mean(all_r2)
cv.r2
library(MiXcan2)
# MiXcan2  -------
set.seed(222)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=355)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
x=model$x;y=model$y; cov=model$cov;
type=model$type; pi=model$pi; foldid=model$foldid
w <- MiXcan2_extract_weight(model = model, keepZeroWeight = T)
summary <- MiXcan2_extract_summary(model = model)
# NoPredictor - no performance
if (type=="NoPredictor") {cv.r2.refit=in.sample.r2.refit=0}
snpidx=Matrix::which(w$weight_cell_1 !=0 | w$weight_cell_2!=0)
pr=length(snpidx)
xreduced=as.matrix(x[, snpidx])
xr_cov=cbind(xreduced, cov)
ft=glmnet::glmnet(x=xr_cov, y=y, family = "gaussian",
alpha=0, lambda = 1e-3)
beta=ft$beta[1:pr]
# weight
w$weight_cell_1[w$weight_cell_1!=0]=
w$weight_cell_2[w$weight_cell_2!=0]=as.numeric(beta)
# in sample c2
yhat=xreduced%*%beta
in.sample.r2.refit=1-sum( (y-y_hat)^2)/sum(y^2)
dim(yhat)
dim(y)
(y-y_hat)
y
y_hat
dim(xreduced)
dim(beta)
beta
yhat=xreduced%*%beta
y-y_hat
yhat
class(y)
class(y_hat)
y-y_hat
dim(y)
in.sample.r2.refit=1-sum( (y-yhat)^2)/sum(y^2)
in.sample.r2.refit
y_hat=xreduced%*%beta
in.sample.r2.refit=1-sum( (y-y_hat)^2)/sum(y^2)
# cv r2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xr_cov[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
y_hat=as.matrix(xreduced[foldid==i,]) %*% temp$beta[1:pr]
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
all_r2[is.na(all_r2)]=0
cv.r2.refit=mean(all_r2)
cv.r2.refit
in.sample.r2.refit
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
ci=pi-0.5; zreduced=ci*xreduced;
xxreduced=as.matrix(cbind(ci, xreduced, zreduced))
temp=glmnet::glmnet(x=xxreduced, y=y, family =
"gaussian", alpha=0, lambda = 0.001)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
# weight
w$weight_cell_1[w$weight_cell_1!=0]=tbeta11
w$weight_cell_2[w$weight_cell_2!=0]=tbeta21
# in sample r2
y_hat=pi* cbind(1, xreduced) %*% tbeta1 +
(1-pi)* cbind(1, xreduced) %*% tbeta2
in.sample.r2.refit=1-sum( (y-y_hat)^2)/sum(y^2)
in.sample.r2.refit
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
all_r2[is.na(all_r2)]=0
cv.r2.refit=mean(all_r2)
}
# cv r2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
r2_temp=1-sum( (y[foldid==i]-y_hat)^2)/sum(y[foldid==i]^2)
all_r2=c(all_r2, r2_temp)
}
all_r2[is.na(all_r2)]=0
cv.r2.refit=mean(all_r2)
all_r2
cv.r2.refit
if (keepZeroWeight==F) {
w = w %>%
dplyr::filter(!(weight_cell_1 == 0 & weight_cell_2 == 0))
}
keepZeroWeight=F
if (keepZeroWeight==F) {
w = w %>%
dplyr::filter(!(weight_cell_1 == 0 & weight_cell_2 == 0))
}
summary2= summary %>% data.frame()  %>%
mutate(in_sample_r2_refit =in.sample.r2.refit)%>%
mutate(cv_r2_refit =cv.r2.refit)
summary2
library(MiXcan2)
# MiXcan2  -------
set.seed(222)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=355)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
library(MiXcan2)
devtools::document()
