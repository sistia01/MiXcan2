apply(., 2, mean)
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS)
sum
?summarise
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(avg = mean(.data[[var]])
)
b[1:3,]
b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
View(cv_r2_refit)
View(sum)
res[[1]]
a=lapply(1:B, function(f) res[[f]]$summary)
a
b=rlist::list.rbind(a)
b
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
a
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
sum
View(sum)
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=b[1,1],.before = 1)
sum
a[1:3,]
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=sum(a$model_type=="CellTypeSpecific"))
table(a$model_type)
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(CTS=mean(a$model_type=="NonSpecific")) %>%
mutate(CTS=mean(a$model_type=="NoPredictor"))
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(a$model_type=="NonSpecific")) %>%
mutate(NP=mean(a$model_type=="NoPredictor"))
a
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=mean(model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(model_type=="NonSpecific")) %>%
mutate(NP=mean(model_type=="NoPredictor"))
View(a)
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=model_type=="CellTypeSpecific") %>%
mutate(NS=model_type=="NonSpecific") %>%
mutate(NP=model_type=="NoPredictor")
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=1*model_type=="CellTypeSpecific") %>%
mutate(NS=1*model_type=="NonSpecific") %>%
mutate(NP=1*model_type=="NoPredictor")
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor"))
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:NP, mean))
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(a$model_type=="NonSpecific")) %>%
mutate(NP=mean(a$model_type=="NoPredictor"))
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
a
res[[1]]$summary
a=lapply(1:B, function(f) res[[f]]$summary) %>% rlist::list.rbind()
a
View(a)
f=1
View(res[[f]]$summary)
names(res[[f]]$summary)
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)  %>%
dplyr:select(!"model_type")
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)  %>%
dplyr::select(!"model_type")
sum
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
dplyr::select(!"model_type")  %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
devtools::document()
library(MiXcan2)
sum
sum1=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum1
View(sum1)
library(MiXcan2)
rm(list=ls())
library(MiXcan2)
library(doParallel)
library(tidyverse)
nCores=detectCores()-1; registerDoParallel(nCores) # use parallel computing for speed,
data(example_data)
set.seed(123)
pi_estimation_result <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior, n_iteration = 5)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
x=model$x;y=model$y; cov=model$cov;
type=model$type; pi=model$pi; foldid=model$foldid
w <- MiXcan2_extract_weight(model = model, keepZeroWeight = T)
summary <- MiXcan2_extract_summary(model = model)
w
if (type=="NoPredictor") {cv.r2.refit=in.sample.r2.refit=0}
snpidx=Matrix::which(w$weight_cell_1 !=0 | w$weight_cell_2!=0)
snpidx
snpidx=snpidx[1]
pr=length(snpidx)
xreduced=as.matrix(x[, snpidx])
dim(xreduced)
# NonSpecific
if (type=="NonSpecific") {
xr_cov=cbind(xreduced, cov)
ft=glmnet::glmnet(x=xr_cov, y=y, family = "gaussian",
alpha=0, lambda = 1e-3)
beta=ft$beta[1:pr]
# weight
w$weight_cell_1[w$weight_cell_1!=0]=
w$weight_cell_2[w$weight_cell_2!=0]=as.numeric(beta)
# in sample c2
in.sample.r2.refit=cor(xreduced%*%beta, y)^2
# cv r2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xr_cov[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
y_hat=xreduced[foldid==i,] %*% temp$beta[1:pr]
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
cv.r2.refit=mean(all_r2)
}
xr_cov=cbind(xreduced, cov)
dim(xr_cov)
ft=glmnet::glmnet(x=xr_cov, y=y, family = "gaussian",
alpha=0, lambda = 1e-3)
beta=ft$beta[1:pr]
beta
in.sample.r2.refit=cor(xreduced%*%beta, y)^2
in.sample.r2.refit
temp=glmnet::glmnet(x=xr_cov[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
xreduced[foldid==i,]
class(xreduced)
y_hat=as.matrix(xreduced[foldid==i,]) %*% temp$beta[1:pr]
y_hat
ci=pi-0.5; zreduced=ci*xreduced;
xxreduced=as.matrix(cbind(ci, xreduced, zreduced))
temp=glmnet::glmnet(x=xxreduced, y=y, family =
"gaussian", alpha=0, lambda = 0.001)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tbeta10
tbeta1
tbeta2
y_hat=pi* cbind(1, xreduced) %*% tbeta1 + (1-pi)* cbind(1, xreduced) %*% tbeta2
in.sample.r2.refit=cor(y_hat, y)^2
in.sample.r2.refit
temp=glmnet::glmnet(x=xxreduced[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
tdesign
rm(list=ls())
data(example_data)
objects()
x_example[x_example > 2] <- 2
table(x_example[,1])
table(x_example[,2])
save(cov_example, GTEx_epithelial_genes, GTEx_prior, new_cov_example,
new_outcome_example, new_X_example, x_example,  y_example, file="/Users/songxiaoyu152/Dropbox/Density_Song/Paper_MiXcan2/Github/Package/data/example_data.rda")
set.seed(123)
pi_estimation_result <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior, n_iteration = 5)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
x=x[,1]
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
x=as.matrix(x)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
library(MiXcan2)
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
library(MiXcan2)
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# format input
x=as.matrix(x); y=as.matrix(y)
n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
yName="Gene1"
# format input
x=as.matrix(x); y=as.matrix(y)
n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
if(is.null(xNameMatrix)) {xNameMatrix=paste0("SNP", 1:p)}
xNameMatrix="SNP1"
# format input
x=as.matrix(x); y=as.matrix(y)
n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
if(is.null(xNameMatrix)) {xNameMatrix=paste0("SNP", 1:p)}
if (is.null(foldid)) {foldid= sample(1:10, n, replace=T)}
if (is.null(cov)) {
pcov=0; xcov=x;
ci=pi-0.5; z=ci*x; xx=as.matrix(cbind(ci, x, z))
}
if (is.null(cov)==F) {
cov=as.matrix(cov)
pcov=ncol(cov); xcov=as.matrix(cbind(x, cov))
ci=pi-0.5; z=ci*x;
xx=as.matrix(cbind(ci, x, z, cov))
}
# tissue model
ft00=glmnet::cv.glmnet(x=xcov, y=y,family="gaussian",  foldid=foldid, alpha=0.5)
ft0=glmnet::glmnet(x=xcov, y=y,  family="gaussian", lambda = ft00$lambda.1se, alpha=0.5)
est.tissue=c(ft0$a0,as.numeric(ft0$beta))
# cell type specific model
ft11=glmnet::cv.glmnet(x=xx, y=y,
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian", foldid=foldid, alpha=0.5)
ft=glmnet::glmnet(x=xx, y=y, penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
est=c(ft$a0,as.numeric(ft$beta))
beta10=est[1]+est[2]/2
beta20=est[1]-est[2]/2
beta11=est[3: (p+2)] + est[(p+3): (2*p+2)]/2
beta21=est[3: (p+2)] - est[(p+3): (2*p+2)]/2
beta11
## add inference for difference > 0
Type ="NonSpecific"
idx.diff=((p+3): (2*p+2)) -1
idx.nonzero=which(est[-1]!=0)
idx.nonzero.diff=intersect(idx.diff, idx.nonzero)
if (length(idx.nonzero.diff)!=0) {
xx.select=xx[,idx.nonzero]
beta.ols.boot=NULL; # beta.en.boot=NULL
for(boot in 1:200) {
id=sample(n, n, replace =T)
gfit = lm(y[id,]~xx.select[id,])
beta.ols.boot =rbind(beta.ols.boot, coef(gfit)[-1])
}
beta.range=apply(beta.ols.boot, 2, function(f)
quantile(f, prob=c(0.025, 0.975), na.rm=T))
beta.diff.range=beta.range[, match(idx.nonzero.diff, idx.nonzero)]
# print(beta.diff.range)
if (is.null(dim(beta.diff.range))) {
any.nonzero= beta.diff.range[1] * beta.diff.range[2]>0} else {
print(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0))
any.nonzero= any(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0), na.rm=T)
}
if (is.na(any.nonzero)==F & any.nonzero==T) {Type ="CellTypeSpecific"}
}
if (Type!="CellTypeSpecific") {
beta1=beta2=est.tissue
} else {
if (is.null(cov)) {
beta1=c(beta10, beta11)
beta2=c(beta20, beta21)
}
if (is.null(cov)==F) {
beta_cov=est[ (2*p+3): (2*p+2+pcov)]
beta1=c(beta10, beta11, beta_cov)
beta2=c(beta20, beta21, beta_cov)
}
}
beta1
beta.all.models=cbind(est.tissue, beta1, beta2)
colnames(beta.all.models)=c("Tissue", "Cell1", "Cell2")
beta.SNP.cell1=data.frame(xNameMatrix, weight=beta1[2:(p+1)])
beta.SNP.cell2=data.frame(xNameMatrix, weight=beta2[2:(p+1)])
if (suppressWarnings(
all(c(beta.SNP.cell1$weight, beta.SNP.cell2$weight)==0) )) {
Type ="NoPredictor"}
# get in sample R2
if (Type=="NonSpecific" | Type=="CellTypeSpecific") {
design=cbind(1,x)
y_hat=pi*(design %*% beta.all.models[1:(1+p), "Cell1"])+
(1-pi)*(design %*% beta.all.models[1:(1+p), "Cell2"])
in.sample.r2= cor(y_hat, y)^2
} else {in.sample.r2=0}
in.sample.r2
Type=="NonSpecific"
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xcov[foldid!=i,], y=y[foldid!=i],  family="gaussian",
lambda = ft00$lambda.1se, alpha=0.5)
y_hat=as.matrix(x[foldid==i,]) %*% temp$beta[1:p]
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
xcov[foldid!=i,]
as.matrix(x[foldid==i,])
all_r2
cv.r2=mean(all_r2, na.rm=T)
cv.r2
i=2
temp=glmnet::glmnet(x=xcov[foldid!=i,], y=y[foldid!=i],  family="gaussian",
lambda = ft00$lambda.1se, alpha=0.5)
y_hat=as.matrix(x[foldid==i,]) %*% temp$beta[1:p]
y_hat
all_r2
all_r2[is.na(all_r2)]=0
cv.r2=mean(all_r2)
cv.r2
library(MiXcan2)
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=5, seed=123)
ensemble$summary
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
ensemble$ensemble_weight
ensemble$all_summary
ensemble$all_weights
x=x_example
x=x[,3]
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
pi=pi_estimation_result$mean_trim_0.05
x=x_example
x=as.matrix(x[,4])
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=5, seed=123)
ensemble$ensemble_summary
ensemble$ensemble_weight
ensemble$all_weights
x=x_example
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=5, seed=123)
ensemble$ensemble_summary
ensemble$ensemble_weight
ensemble$all_weights
ensemble$ensemble_summary
ensemble$ensemble_summary_by_type
View(ensemble$ensemble_summary_by_type)
ensemble$ensemble_summary
ensemble$ensemble_weight
