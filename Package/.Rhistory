tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat[foldid==i]= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
if (is.null(cov)==F) {
y_tilde[foldid==i]=y[foldid==i]-as.matrix(cov[foldid==i,]) %*% test[(2*pr+3): (length(test))]
} else (y_tilde[foldid==i]=y[foldid==i])
}
cv.refit=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
}
if (keepZeroWeight==F) {
w = w %>%
dplyr::filter(!(weight_cell_1 == 0 & weight_cell_2 == 0))
}
s2=data.frame(in.sample.unadj.cor.refit=in.sample.refit[1],
in.sample.adj.cor.refit=in.sample.refit[2],
in.sample.unadj.R2.refit=in.sample.refit[3],
in.sample.adj.R2.refit=in.sample.refit[4],
cv.unadj.cor.refit=cv.refit[1],
cv.adj.cor.refit=cv.refit[2],
cv.unadj.R2.refit=cv.refit[3],
cv.adj.R2.refit=cv.refit[4])
summary2= cbind(summary, s2)
return(list(weight=w, summary=summary2))
}
summary
#'  Un-penalized weights for MiXcan selected SNPs
#'
#' Refit MiXcan selected SNPs to  ordinary least square for un-penalized weights.
#'
#' @param model A direct output from MiXcan() function, which includes the
#' prediction weights as well as other summaries of the prediction models.
#' @param keepZeroWeight: Whether to keep predictors with zero weights.
#'
#' @return A data frame with weight for cell 1 and 2, including the potential meta data for the SNP/gene.
#' @export
#'
MiXcan2_refit <- function(model, keepZeroWeight=F) {
x=model$x;y=model$y; cov=model$cov; n=nrow(x)
type=model$type; pi=model$pi; foldid=model$foldid
w <- MiXcan2_extract_weight(model = model, keepZeroWeight = T)
summary <- MiXcan2_extract_summary(model = model)
snpidx=Matrix::which(w$weight_cell_1 !=0 | w$weight_cell_2!=0)
pr=length(snpidx)
xreduced=as.matrix(x[, snpidx])
ci=pi-0.5; zreduced=ci*xreduced;
if (is.null(cov)==F) {
xr_cov=cbind(xreduced, cov)
xxreduced=as.matrix(cbind(ci, xreduced, zreduced, cov))
} else {
xr_cov=xreduced # nonspecific to use
xxreduced=as.matrix(cbind(ci, xreduced, zreduced)) # CTS to use
}
# NoPredictor - no performance
if (type=="NoPredictor") {in.sample.refit=cv.refit=rep(0, 4)}
# NonSpecific
if (type=="NonSpecific") {
ft=glmnet::glmnet(x=xr_cov, y=y, family = "gaussian",
alpha=0, lambda = 1e-3)
beta=ft$beta[1:pr]
# weight
w$weight_cell_1[w$weight_cell_1!=0]=
w$weight_cell_2[w$weight_cell_2!=0]=as.numeric(beta)
# in sample metrics
y_hat=cbind(1, xreduced)%*%c(ft$a0, beta)
if (is.null(cov)==F) {
y_tilde=y-cov %*% ft$beta[(pr+1): (length(ft$beta))]
} else (y_tilde=y)
in.sample.refit=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
# cv metrics
y_hat=y_tilde= rep(NA, n)
for (i in 1:10) {
temp=glmnet::glmnet(x=xr_cov[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
y_hat[foldid==i]=cbind(1, xreduced[foldid==i,]) %*% c(temp$a0, temp$beta[1:pr])
if (is.null(cov)==F) {
y_tilde[foldid==i]=y[foldid==i]-cov[foldid==i,] %*% temp$beta[(pr+1): (length(temp$beta))]
} else (y_tilde[foldid==i]=y[foldid==i])
}
cv.refit=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
}
# CellTypeSpecific
if (type=="CellTypeSpecific") {
temp=glmnet::glmnet(x=xxreduced, y=y, family =
"gaussian", alpha=0, lambda = 0.001)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
# weight
w$weight_cell_1[w$weight_cell_1!=0]=tbeta11
w$weight_cell_2[w$weight_cell_2!=0]=tbeta21
# in sample metrics
y_hat=pi* cbind(1, xreduced) %*% tbeta1 +
(1-pi)* cbind(1, xreduced) %*% tbeta2
if (is.null(cov)==F) {
y_tilde=y-cov %*% test[(2*pr+3): (length(test))]
} else (y_tilde=y)
in.sample.refit=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
# cv metrics
y_hat=y_tilde= rep(NA, n)
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[foldid!=i,], y=y[foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat[foldid==i]= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
if (is.null(cov)==F) {
y_tilde[foldid==i]=y[foldid==i]-as.matrix(cov[foldid==i,]) %*% test[(2*pr+3): (length(test))]
} else (y_tilde[foldid==i]=y[foldid==i])
}
cv.refit=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
}
if (keepZeroWeight==F) {
w = w %>%
dplyr::filter(!(weight_cell_1 == 0 & weight_cell_2 == 0))
}
s2=data.frame(in.sample.unadj.cor.refit=in.sample.refit[1],
in.sample.adj.cor.refit=in.sample.refit[2],
in.sample.unadj.R2.refit=in.sample.refit[3],
in.sample.adj.R2.refit=in.sample.refit[4],
cv.unadj.cor.refit=cv.refit[1],
cv.adj.cor.refit=cv.refit[2],
cv.unadj.R2.refit=cv.refit[3],
cv.adj.R2.refit=cv.refit[4])
summary2= cbind(summary, s2)
return(list(weight=w, summary=summary2))
}
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
View(ensemble$ensemble_summary_by_type)
ensemble$ensemble_summary
ensemble$ensemble_weight
n=200
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(1+5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_weight
ensemble$all_weights
n=500
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(1+5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_weight
n=1000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(1+5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_weight
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(1+5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$ensemble_summary_by_type
ensemble$ensemble_summary
ensemble$ensemble_weight
library(MiXcan2)
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(5+5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
a=MiXcan_refit$summary
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
a
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(5*x[,1])+rnorm(n)
y1=y
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(5+5*x[,1])+rnorm(n)
cor(y1, y)
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=5+pi*(5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
a=MiXcan_refit$summary
set.seed(123)
n=10000
x=matrix(rbinom(n*2, 2, 0.3),ncol=2)
pi=rbeta(n, 2,3)
y=pi*(5*x[,1])+rnorm(n)
cov=NULL
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
a
# library(MiXcan)
data(example_data)
set.seed(123)
pi_estimation_result <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior, n_iteration = 5)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
# MiXcan2  -------
set.seed(123)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# format input
x=as.matrix(x); y=as.matrix(y);n=nrow(x); p=ncol(x)
# clean name
if(is.null(yName)) {yName="Gene"}
if(is.null(xNameMatrix)) {xNameMatrix=paste0("SNP", 1:p)}
if (is.null(foldid)) {foldid= sample(1:10, n, replace=T)}
if (is.null(cov)) {
pcov=0; xcov=x;
ci=pi-0.5; z=ci*x; xx=as.matrix(cbind(ci, x, z))
}
if (is.null(cov)==F) {
cov=as.matrix(cov)
pcov=ncol(cov); xcov=as.matrix(cbind(x, cov))
ci=pi-0.5; z=ci*x;xx=as.matrix(cbind(ci, x, z, cov))
}
# tissue model
ft00=glmnet::cv.glmnet(x=xcov, y=y,family="gaussian",  foldid=foldid, alpha=0.5)
ft0=glmnet::glmnet(x=xcov, y=y,  family="gaussian", lambda = ft00$lambda.1se, alpha=0.5)
est.tissue=c(ft0$a0,as.numeric(ft0$beta))
# cell type specific model
ft11=glmnet::cv.glmnet(x=xx, y=y,
penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian", foldid=foldid, alpha=0.5)
ft=glmnet::glmnet(x=xx, y=y, penalty.factor=c(0, rep(1, ncol(xx)-1)),
family="gaussian",
lambda = ft11$lambda.1se, alpha=0.5)
est=c(ft$a0,as.numeric(ft$beta))
beta10=est[1]+est[2]/2
beta20=est[1]-est[2]/2
beta11=est[3: (p+2)] + est[(p+3): (2*p+2)]/2
beta21=est[3: (p+2)] - est[(p+3): (2*p+2)]/2
## add inference for difference > 0
Type ="NonSpecific"
idx.diff=((p+3): (2*p+2)) -1
idx.nonzero=which(est[-1]!=0)
idx.nonzero.diff=intersect(idx.diff, idx.nonzero)
if (length(idx.nonzero.diff)!=0) {
xx.select=xx[,idx.nonzero]
beta.ols.boot=NULL; # beta.en.boot=NULL
for(boot in 1:200) {
id=sample(n, n, replace =T)
gfit = lm(y[id,]~xx.select[id,])
beta.ols.boot =rbind(beta.ols.boot, coef(gfit)[-1])
}
beta.range=apply(beta.ols.boot, 2, function(f)
quantile(f, prob=c(0.025, 0.975), na.rm=T))
beta.diff.range=beta.range[, match(idx.nonzero.diff, idx.nonzero)]
# print(beta.diff.range)
if (is.null(dim(beta.diff.range))) {
any.nonzero= beta.diff.range[1] * beta.diff.range[2]>0} else {
print(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0))
any.nonzero= any(apply(beta.diff.range, 2, function(f) f[1] * f[2]>0), na.rm=T)
}
if (is.na(any.nonzero)==F & any.nonzero==T) {Type ="CellTypeSpecific"}
}
if (Type!="CellTypeSpecific") {
beta1=beta2=est.tissue
} else { # CellTypeSpecific
if (is.null(cov)) {
beta1=c(beta10, beta11)
beta2=c(beta20, beta21)
}
if (is.null(cov)==F) {
beta1=c(beta10, beta11, est[ (2*p+3): (2*p+2+pcov)])
beta2=c(beta20, beta21, est[ (2*p+3): (2*p+2+pcov)])
}
}
beta.all.models=cbind(est.tissue, beta1, beta2)
colnames(beta.all.models)=c("Tissue", "Cell1", "Cell2")
beta.SNP.cell1=data.frame(xNameMatrix, weight=beta1[2:(p+1)])
beta.SNP.cell2=data.frame(xNameMatrix, weight=beta2[2:(p+1)])
if (suppressWarnings(
all(c(beta.SNP.cell1$weight, beta.SNP.cell2$weight)==0) )) {
Type ="NoPredictor"}
design=cbind(1,x)
y_hat=pi*(design %*% beta.all.models[1:(1+p), "Cell1"])+
(1-pi)*(design %*% beta.all.models[1:(1+p), "Cell2"])
if (is.null(cov)==F) {
beta_cov = beta1[ (p+2): length(beta1)]
y_tilde=y-cov %*%beta_cov
} else {y_tilde=y}
lm(y_tilde~y_hat)
in.sample=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
in.sample
lm(y_tilde~y_hat-1)
y_hat=y_tilde=rep(NA, n)
for (i in 1:10) {
temp=glmnet::glmnet(x=as.matrix(xcov[foldid!=i,]), y=y[foldid!=i],
family="gaussian",
lambda = ft00$lambda.1se, alpha=0.5)
y_hat[foldid==i]=cbind(1, x[foldid==i,]) %*% c(temp$a0, temp$beta[1:p])
if (is.null(cov)==F) {
beta_cov = temp$beta[(p+1): length(temp$beta)]
y_tilde[foldid==i]=y[foldid==i]-cov[foldid==i,] %*%beta_cov
} else {y_tilde[foldid==i]=y[foldid==i]}
}
lm(y_tilde~y_hat-1)
cv=metrics(y_hat=y_hat, y_tilde=y_tilde, y=y)
cv
unadj.cor= cor(y_hat, y)
unadj.cor
sum((y_tilde-y_hat)^2)
sum((y_tilde-mean(y_tilde))^2)
cor(y_hat, y_tilde)
plot(y_hat, y_tilde)
plot(y_hat, y_tilde)
summary(y_hat)
summary(y_tilde)
