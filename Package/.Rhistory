model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
# make up a dataset------
set.seed(123)
n=200
pi=rbeta(n, 2, 3)
x=matrix(rbinom(n*10, 2, 0.3), ncol=10)
y=x[,1]*pi+rnorm(n, sd=0.2)
cov=NULL
#
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=2, seed=123)
ensemble$summary
ensemble$ensemble_weight
ensemble$all_weights
B
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
dim(x)
dim(y)
length()
length(y)
length(pi)
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
length(foldid1)
xNameMatrix=NULL
yName=NULL
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
res
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary)
a
b=rlist::list.rbind(a)%>%
mutate(NP= 1*(model_type=="NoPredictor"))%>%
mutate(CTS= 1*(model_type=="CellTypeSpecific"))%>%
mutate(NS= 1*(model_type=="NonSpecific"))%>%
dplyr::select(!"model_type") %>%
mutate(no_of_models=B, .before="in_sample_r2")
b
sum=apply(b[,-1], 2, mean) %>% as.data.frame() %>% t()%>% as.data.frame() %>%
mutate(Gene=b[1,1],.before = 1)
sum
ww=NULL
for (i in 1:B) {
w=res[[i]]$weight %>%
mutate(ID=i, .before = 1)
ww=rbind(ww, w)
}
ww
name_temp=setdiff(colnames(ww), c("ID", "weight_cell_1", "weight_cell_2"))
ensemble_weight= ww%>%
group_by_at(name_temp) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean) %>%
filter(weight_cell_1!=0 |weight_cell_2 !=0)
ensemble_weight
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$summary
ensemble$ensemble_weight
library(MiXcan2)
rm(list=ls())
library(MiXcan2)
# make up a dataset------
set.seed(123)
n=200
pi=rbeta(n, 2, 3)
x=matrix(rbinom(n*10, 2, 0.3), ncol=10)
y=x[,1]*pi+rnorm(n, sd=0.2)
cov=NULL
#
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
library(MiXcan2)
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
devtools::document()
library(MiXcan2)
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
devtools::document()
library(MiXcan2)
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
devtools::document()
library(MiXcan2)
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
?add_column
devtools::document()
library(MiXcan2)
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
devtools::document()
library(MiXcan2)
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
MiXcan_summary_result
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
devtools::document()
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
devtools::document()
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
devtools::document()
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
devtools::document()
devtools::document()
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
library(foreach)
?foreach
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$summary
ensemble$ensemble_weight
# library(MiXcan)
data(example_data)
set.seed(123)
pi_estimation_result <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior, n_iteration = 5)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$summary
ensemble$ensemble_weight
# start foreach
`%dopar%` <- foreach::`%dopar%`
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
B=5
# start foreach
`%dopar%` <- foreach::`%dopar%`
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
seed=123
# start foreach
`%dopar%` <- foreach::`%dopar%`
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
yName=NULL
xNameMatrix=NULL
# start foreach
`%dopar%` <- foreach::`%dopar%`
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary)
b=rlist::list.rbind(a)%>%
mutate(NP= 1*(model_type=="NoPredictor"))%>%
mutate(CTS= 1*(model_type=="CellTypeSpecific"))%>%
mutate(NS= 1*(model_type=="NonSpecific"))%>%
dplyr::select(!"model_type") %>%
mutate(no_of_models=B, .before="in_sample_r2")
library(tidyverse)
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary)
b=rlist::list.rbind(a)%>%
mutate(NP= 1*(model_type=="NoPredictor"))%>%
mutate(CTS= 1*(model_type=="CellTypeSpecific"))%>%
mutate(NS= 1*(model_type=="NonSpecific"))%>%
dplyr::select(!"model_type") %>%
mutate(no_of_models=B, .before="in_sample_r2")
b
b[,-1]
b
b %>% select(!yName)
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
apply(b[,-1], 2, mean)
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
apply(., 2, mean)
sum
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
mean
sum
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
apply(., 2, mean)
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS)
sum
?summarise
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(avg = mean(.data[[var]])
)
b[1:3,]
b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
sum=b %>%  dplyr::select(!"yName") %>% group_by(NP, CTS, NS) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
View(cv_r2_refit)
View(sum)
res[[1]]
a=lapply(1:B, function(f) res[[f]]$summary)
a
b=rlist::list.rbind(a)
b
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
a
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean))
sum
View(sum)
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=b[1,1],.before = 1)
sum
a[1:3,]
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=sum(a$model_type=="CellTypeSpecific"))
table(a$model_type)
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(CTS=mean(a$model_type=="NonSpecific")) %>%
mutate(CTS=mean(a$model_type=="NoPredictor"))
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(a$model_type=="NonSpecific")) %>%
mutate(NP=mean(a$model_type=="NoPredictor"))
a
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=mean(model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(model_type=="NonSpecific")) %>%
mutate(NP=mean(model_type=="NoPredictor"))
View(a)
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=model_type=="CellTypeSpecific") %>%
mutate(NS=model_type=="NonSpecific") %>%
mutate(NP=model_type=="NoPredictor")
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS=1*model_type=="CellTypeSpecific") %>%
mutate(NS=1*model_type=="NonSpecific") %>%
mutate(NP=1*model_type=="NoPredictor")
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind() %>%
mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor"))
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:NP, mean))
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
sum=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1) %>%
mutate(CTS=mean(a$model_type=="CellTypeSpecific")) %>%
mutate(NS=mean(a$model_type=="NonSpecific")) %>%
mutate(NP=mean(a$model_type=="NoPredictor"))
a=lapply(1:B, function(f) res[[f]]$summary) %>%rlist::list.rbind()
a
res[[1]]$summary
a=lapply(1:B, function(f) res[[f]]$summary) %>% rlist::list.rbind()
a
View(a)
f=1
View(res[[f]]$summary)
names(res[[f]]$summary)
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)  %>%
dplyr:select(!"model_type")
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)  %>%
dplyr::select(!"model_type")
sum
sum=a %>% mutate(CTS= 1*(model_type=="CellTypeSpecific")) %>%
mutate(NS=1*(model_type=="NonSpecific")) %>%
mutate(NP=1*(model_type=="NoPredictor")) %>%
dplyr::select(!"model_type")  %>%
summarise(across(n_snp_input:NP, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum
devtools::document()
library(MiXcan2)
sum
sum1=a %>%  group_by(model_type) %>%
summarise(across(n_snp_input:cv_r2_refit, mean)) %>%
mutate(Gene=a[1,1],.before = 1)
sum1
View(sum1)
library(MiXcan2)
