y_hat=x[model$foldid==i,] %*% temp$beta[1:pr]
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
# cv r2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xr_cov[model$foldid!=i,], y=y[model$foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
y_hat=xreduced[model$foldid==i,] %*% temp$beta[1:pr]
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
cv.r2=mean(all_r2)
cv.r2
w$weight_cell_1[w$weight_cell_1!=0]=
w$weight_cell_2[w$weight_cell_1!=0]=
as.numeric(beta)
w
ci=pi-0.5; zreduced=ci*xreduced;
xxreduced=as.matrix(cbind(ci, xreduced, zreduced))
ci=pi-0.5; zreduced=ci*xreduced;
xxreduced=as.matrix(cbind(ci, xreduced, zreduced))
ft=glmnet::glmnet(x=xxreduced, y=y, family =
"gaussian", alpha=0, lambda = 0.001)
ci=pi-0.5; zreduced=ci*xreduced;
xxreduced=as.matrix(cbind(ci, xreduced, zreduced))
temp=glmnet::glmnet(x=xxreduced, y=y, family =
"gaussian", alpha=0, lambda = 0.001)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tbeta1
tbeta2
w$weight_cell_1[w$weight_cell_1!=0]=tbeta11
w$weight_cell_2[w$weight_cell_2!=0]=tbeta21
pi* cbind(1, xreduced) %*% tbeta1
y_hat=pi* cbind(1, xreduced) %*% tbeta1 + (1-pi)* cbind(1, xreduced) %*% tbeta2
in.sample.r2.refit=cor(y_hat, y)^2
in.sample.r2.refit
i
temp=glmnet::glmnet(x=xxreduced[model$foldid!=i,], y=y[model$foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xxreduced[foldid==i, (1:p)] )
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
cor(y_hat, y[foldid==i])^2
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[model$foldid!=i,], y=y[model$foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
cv.r2=mean(all_r2)
cv.r2
all_r2
w
summary
summary2= summary %>% data.frame()  %>%
mutate(in_sample_r2_refit =in.sample.r2.refit)%>%
mutate(cv_r2_refit =cv.r2.refit)
all_r2=NULL
for (i in 1:10) {
temp=glmnet::glmnet(x=xxreduced[model$foldid!=i,], y=y[model$foldid!=i],
family="gaussian",
lambda = 1e-3, alpha=0)
test=c(temp$a0,as.numeric(temp$beta))
tbeta10=test[1]+test[2]/2
tbeta20=test[1]-test[2]/2
tbeta11=test[3: (pr+2)] + test[(pr+3): (2*pr+2)]/2
tbeta21=test[3: (pr+2)] - test[(pr+3): (2*pr+2)]/2
tbeta1=c(tbeta10, tbeta11)
tbeta2=c(tbeta20, tbeta21)
tdesign=cbind(1, xreduced[foldid==i,] )
y_hat= pi[foldid==i] * tdesign %*% tbeta1 +
(1-pi[foldid==i]) * tdesign %*% tbeta2
all_r2=c(all_r2, cor(y_hat, y[foldid==i])^2)
}
cv.r2.refit=mean(all_r2)
summary2= summary %>% data.frame()  %>%
mutate(in_sample_r2_refit =in.sample.r2.refit)%>%
mutate(cv_r2_refit =cv.r2.refit)
summary2
snpidx=NULL
snpidx=Matrix::which(w$weight_cell_1 !=0 | w$weight_cell_2!=0)
pr=length(snpidx)
xreduced=as.matrix(x[, snpidx])
xreduced
snpidx=NULL
pr=length(snpidx)
xreduced=as.matrix(x[, snpidx])
xreduced
n=nrow(x)
boot_idx=sample(n, n, replace=T)
cov
cov=NULL
n=nrow(x)
boot_idx=sample(n, n, replace=T)
covboot=cov[boot_idx,]
covboot
covboot=as.matrix(cov)[boot_idx,]
cov=rep(1,125)
covboot=as.matrix(cov)[boot_idx,]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
seed=123
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
library(MiXcan2)
?MiXcan2_refit
library(MiXcan2)
?MiXcan2_refit
MiXcan2_refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
model$foldid
model$type
# library(MiXcan)
data(example_data)
set.seed(123)
pi_estimation_result <- pi_estimation(expression_matrix = GTEx_epithelial_genes,
prior = GTEx_prior, n_iteration = 5)
pi=pi_estimation_result$mean_trim_0.05
x=x_example
y=y_example
cov=cov_example
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model,
y=y,
x=x, cov = cov,
pi= pi)
ï¼ŸMiXcan2_refit
?MiXcan2_refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
i=1
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
?MiXcan2_model
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
model = model
keepZeroWeight
keepZeroWeight=T
w <- MiXcan2_extract_weight(model = model, keepZeroWeight = T)
summary <- MiXcan2_extract_summary(model = model)
# NoPredictor - no performance
if (model$type=="NoPredictor") {cv.r2.refit=in.sample.r2.refit=0}
snpidx=Matrix::which(w$weight_cell_1 !=0 | w$weight_cell_2!=0)
pr=length(snpidx)
xreduced=as.matrix(model$x[, snpidx])
devtools::document()
library(MiXcan2)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
MiXcan_refit$summary
model
MiXcan_refit$summary
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$summary
MiXcan_summary_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
MiXcan_refit$summaryi=1
i=1
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
MiXcan_refit
i=2
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
MiXcan_refit$summary
library(MiXcan2)
i=1
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
MiXcan_refit$summary
i=2
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
i=2
MiXcan_refit$summary
# make up a dataset------
set.seed(123)
n=200
pi=rbeta(n, 2, 3)
x=matrix(rbinom(n*10, 2, 0.3), ncol=10)
y=x[,1]*pi+rnorm(n, sd=0.2)
cov=NULL
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=2, seed=123)
library(MiXcan2)
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=2, seed=123)
ensemble$summary
ensemble$ensemble_weight
ensemble$all_weights
ensemble$summary
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
B=2
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
# make up a dataset------
set.seed(123)
n=200
pi=rbeta(n, 2, 3)
x=matrix(rbinom(n*10, 2, 0.3), ncol=10)
y=x[,1]*pi+rnorm(n, sd=0.2)
cov=NULL
#
# MiXcan2  -------
set.seed(111)
foldid <- sample(1:10, length(y), replace=T)
model <- MiXcan2_model(y=y, x=x, cov = cov,
pi= pi,
foldid = foldid, yName="Gene1",
xNameMatrix = paste0("X", 1:ncol(x)))
model$beta.SNP.cell1
model$beta.SNP.cell2
# Extract Info
MiXcan_weight_result <- MiXcan2_extract_weight(model = model)
MiXcan_weight_result
MiXcan_summary_result <- MiXcan2_extract_summary(model=model)
MiXcan_summary_result
# Refit
MiXcan_refit <- MiXcan2_refit(model = model)
MiXcan_refit$weight
MiXcan_refit$summary
# MiXcan2 Ensemble -------
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=2, seed=123)
ensemble$summary
ensemble$ensemble_weight
ensemble$all_weights
B
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
dim(x)
dim(y)
length()
length(y)
length(pi)
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
length(foldid1)
xNameMatrix=NULL
yName=NULL
# start foreach
res=foreach(i = 1:B, .combine='c') %dopar% {
print(i)
# set seed
if (is.null(seed)==F) {seed1=seed+i*13; set.seed(seed1)}
n=nrow(x)
boot_idx=sample(n, n, replace=T)
yboot=y[boot_idx]
xboot=x[boot_idx,]
piboot=pi[boot_idx]
if (is.null(cov)==F) {covboot=as.matrix(cov)[boot_idx,]} else(covboot=NULL)
foldid1 <- sample(1:10, length(yboot), replace=T)
# run MiXcan
model <- MiXcan2_model(y=yboot, x=xboot, cov = covboot,
pi= piboot,
foldid = foldid1, yName=yName,
xNameMatrix=xNameMatrix)
# Refit
MiXcan_refit <- MiXcan2_refit(model = model, keepZeroWeight=T)
return(list(MiXcan_refit))
}
res
# summarize B results -- summary
a=lapply(1:B, function(f) res[[f]]$summary)
a
b=rlist::list.rbind(a)%>%
mutate(NP= 1*(model_type=="NoPredictor"))%>%
mutate(CTS= 1*(model_type=="CellTypeSpecific"))%>%
mutate(NS= 1*(model_type=="NonSpecific"))%>%
dplyr::select(!"model_type") %>%
mutate(no_of_models=B, .before="in_sample_r2")
b
sum=apply(b[,-1], 2, mean) %>% as.data.frame() %>% t()%>% as.data.frame() %>%
mutate(Gene=b[1,1],.before = 1)
sum
ww=NULL
for (i in 1:B) {
w=res[[i]]$weight %>%
mutate(ID=i, .before = 1)
ww=rbind(ww, w)
}
ww
name_temp=setdiff(colnames(ww), c("ID", "weight_cell_1", "weight_cell_2"))
ensemble_weight= ww%>%
group_by_at(name_temp) %>%
summarise_at(vars("weight_cell_1", "weight_cell_2"), mean) %>%
filter(weight_cell_1!=0 |weight_cell_2 !=0)
ensemble_weight
ensemble=MiXcan2_ensemble(y=y, x=x, cov=cov, pi=pi,
yName="Gene1", B=10, seed=123)
ensemble$summary
ensemble$ensemble_weight
library(MiXcan2)
